# name: 'CI - Backend üß¨'

# env:
#   IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/cerebrum

# on:
#   workflow_dispatch:
#   push:
#     branches:
#       - 'feature/backend/**'
#       - 'fix/backend/**'
#   pull_request:
#     branches:
#       - 'feature/**'
#       - 'fix/**'

# jobs:
#   build:
#     name: 'Build üèó'
#     strategy:
#       matrix:
#         os: 
#           - ubuntu-latest
#           - windows-latest
#           - macos-latest
#         python-version:
#           - "3.10.5"
#     defaults:
#       run:
#         working-directory: backend/
#     runs-on: ${{ matrix.os }}

#     steps:
#       - name: Check repository
#         uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}
#           cache: 'pip'
#       - name: Display Python version
#         run: python -c "import sys; print(sys.version)"
#       - name: Install dependencies
#         if: runner.os != 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       - name: Install dependencies for Windows
#         if: runner.os == 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           pip install fastapi uvicorn psycopg2-binary "SQLAlchemy[asyncio]" sqladmin
#   code-quality:
#     name: 'Code-Quality üíé'
#     needs: build
#     strategy:
#       matrix:
#         os:
#           - ubuntu-latest
#           - windows-latest
#           - macos-latest
#         python-version:
#           - "3.10.5"
#     defaults:
#       run:
#         working-directory: backend/
#     runs-on: ${{ matrix.os }}

#     steps:
#       - name: Check repository
#         uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}
#           cache: 'pip'
#       - name: Display Python version
#         run: python -c "import sys; print(sys.version)"
#       - name: Install dev dependencies
#         if: runner.os != 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
#       - name: Install dev dependencies for Windows
#         if: runner.os == 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           pip install -r requirements-dev.txt
#       - name: Install Dependencies for Linting
#         run: |
#           pip install "black>=22.3.0" "flake8>=4.0.1" "isort>=5.10.1" "mypy>=0.961" "pycodestyle>=2.8.0" "pylint>=2.14.3"
#       - name: Lint with Black
#         uses: psf/black@stable
#         with:
#           options: "--exclude=tests/"
#           src: "./backend/app/"
#       - name: Lint with Isort
#         run: |
#           isort . --check-only --profile black
#       - name: Lint with PyLint
#         run: |
#           pylint app/
#       - name: Lint with Flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=119 --statistics
#       - name: Lint with MyPy
#         run: |
#           mypy . --pretty
#   test:
#     name: 'Test üî¨'
#     needs: build
#     strategy:
#       matrix:
#         os:
#           - ubuntu-latest
#         python-version:
#           - "3.10.5"
#     defaults:
#       run:
#         working-directory: backend/

#     services:
#       postgres:
#         image: postgres:14.2-alpine
#         env:
#           POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#           POSTGRES_USER : ${{ secrets.POSTGRES_USER }}
#           POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#         ports:
#         - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#     env:
#       DATABASE_URI: ${{ secrets.DATABASE_URI }}
#       SECRET_KEY: ${{ secrets.SECRET_KEY }}
#       JWT_TOKEN_PREFIX: ${{ secrets.JWT_TOKEN_PREFIX }}
#     runs-on: ${{ matrix.os }}
#     steps:
#       - name: Check repository
#         uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v3
#         with:
#           python-version: ${{ matrix.python-version }}
#           cache: 'pip'
#       - name: Display Python version
#         run: python -c "import sys; print(sys.version)"
#       - name: Install dependencies
#         if: runner.os != 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
#       - name: Install dependencies for Windows
#         if: runner.os == 'Windows'
#         run:  |
#           python -m pip install --upgrade pip
#           pip install -r requirements-dev.txt
#       - name: Install Dependencies for Testing
#         run: |
#           pip install pytest pytest-asyncio pytest-cov pytest-xdist
#       - name: Test with Pytest-Cov
#         run: |
#           pytest --cov --cov-report xml .
#   build-docker:
#     name: 'Build Docker Image üê≥'
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: |
#           docker pull ${{ env.IMAGE }}:latest || true
#       - name: Build image
#         run: |
#           docker build \
#             --cache-from ${{ env.IMAGE }}:latest \
#             --tag ${{ env.IMAGE }}:latest \
#             --file ./backend/Dockerfile.prod \
#             "./backend"
#       - name: Push image
#         run: |
#           docker push ${{ env.IMAGE }}:latest